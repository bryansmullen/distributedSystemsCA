// syntax declaration
syntax = "proto3";

// java options
option java_multiple_files = true;
option java_package = "com.bryanmullen.milkingService";
option java_outer_classname = "MilkingPackage";

// package
package milkingService;

// imports
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


// messages

message MilkCollectionRequest{
  string checkedBy = 1; // who checked the milk so that responsible person
  // can be identified in the audit log
}

message MilkCollectionResponse {
  double milkVolumeInLitres = 1; // volume of milk collected in litres at the
  // time of check
  double capacityInLitres = 2; // capacity of the milk tank
  bool isFull = 3; // true if the tank is full at the time of check to indicate
  // that it is not safe to collect more milk
}

message MilkProductionRequest{
  string checkedBy = 1; // who checked the milk so that responsible person
  // can be identified in the audit log
}

message MilkProductionResponse {
  int32 currentCowId = 1;
  double milkVolumeLogged = 2; // volume of milk produced in litres
}

message MilkCurrentCowRequest{
  string checkedBy = 1; // who checked the milk so that responsible person
  // can be identified in the audit log
}

message MilkCurrentCowResponse {
  int32 currentCowId = 1;
  google.protobuf.Timestamp startTime = 2;
  google.protobuf.Duration duration = 3;
}

// services
service MilkingService {
  // This method should be able to represent the total milk currently
  // collected in the collection unit relative to the capacity, to give an
  // indication of when the unit is full.This method will be implemented
  // using Server Streaming.
  rpc milkCollection(MilkCollectionRequest) returns (stream
      MilkCollectionResponse){}

  // This method should be able to log the milk produced by the current
  // milking session against a particular cow, based on the ID of the current
  // cow. It should calculate the volume of milk by comparing the current
  // total collection against the last logged value and calculating the
  // difference.This method will be implemented using Unary Method.
  rpc milkProduction(MilkProductionRequest) returns (
      MilkProductionResponse){}

  // This method should be capable of returning the ID of the current cow
  // being milked. This method will be implemented using Server Streaming.
  rpc milkCurrentCow(MilkCurrentCowRequest) returns (stream
      MilkCurrentCowResponse){}
}



